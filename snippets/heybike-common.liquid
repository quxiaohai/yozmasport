<script>
    const $heybike = {
        _events: {},
        _domLoaded: false,
        _loaded: false,
        _timer: null,
        screenWidth: window.innerWidth,
        screenHeight: window.innerHeight,
        isMobile: /android|iphone|ipad|ipod|micromessenger/gi.test(navigator.userAgent.toLocaleLowerCase()) || window.innerWidth <= 1023,
        on: (event, fn, node) => {
            if (!node) {
                switch (event) {
                    case "resize":
                    case "load":
                        node = window;
                        break;
                    case "click":
                        node = document.body;
                        break;
                    default:
                        node = document;
                        break;
                }
            }
            if (!$heybike._events[event]) {
                $heybike._events[event] = [{node, fns: []}];
            }

            const info = $heybike._events[event].find(item => item.node === node);

            if (info.fns.length === 0) {
                if (event === "resize") {
                    let _timer = null;
                    node.addEventListener("resize", function () {
                        clearTimeout(_timer);
                        _timer = setTimeout(() => {
                            $heybike.screenWidth = window.innerWidth;
                            $heybike.screenHeight = window.innerHeight;
                            $heybike.isMobile = /android|iphone|ipad|ipod|micromessenger/gi.test(navigator.userAgent.toLocaleLowerCase()) || $narwal.screenWidth <= 1023;
                            info.fns.forEach(fn => {
                                fn && fn({
                                    mode: $heybike.isMobile ? "h5" : "pc"
                                });
                            });
                        }, 100);
                    });
                } else if (event === "scroll") {
                    const isDoc = node === document;
                    node.addEventListener("scroll", function () {
                        const left = isDoc ? window.scrollX || document.documentElement.scrollLeft : node.scrollLeft;
                        const top = isDoc ? window.scrollY || document.documentElement.scrollTop : node.scrollTop;
                        info.fns.forEach(fn => {
                            fn && fn({
                                left,
                                top
                            });
                        });
                    });
                } else {
                    node.addEventListener(event, function (ev) {
                        info.fns.forEach(fn => {
                            fn && fn(ev);
                        });
                    });
                }
            }

            info.fns.push(fn);

            if ($heybike._domLoaded && event === "DOMContentLoaded") {
                fn && fn();
            } else if ($heybike._loaded && event === "load") {
                fn && fn();
            }
        },
        bind: (key, fn) => {
            if (!$heybike._events[key]) {
                $heybike._events[key] = [];
            }
            $heybike._events[key].push(fn);
        },
        emit: (key, data) => {
            return new Promise(resolve => {
                const list = $heybike._events[key];
                if (list) {
                    list.forEach(fn => {
                        fn && fn(data);
                    });
                    resolve(true);
                } else {
                    resolve(false);
                }
            });
        },
        getNodeList: (node) => {
            var list = Array.prototype.slice.call(node.querySelectorAll("[node-name]"), 0);
            var nodeList = {};

            list.forEach(function (el) {
                var name = el.getAttribute("node-name");

                if (name in nodeList) {
                    nodeList[name] = [].concat(nodeList[name], el);
                } else {
                    nodeList[name] = el;
                }
            });

            return nodeList;
        },
        getOffset: el => {
            let body = document.body;
            el = el || body;
            let box = el.getBoundingClientRect();
            let clientTop = el.clientTop || body.clientTop || 0;
            let clientLeft = el.clientLeft || body.clientLeft || 0;
            let scrollTop = window.scrollY || el.scrollTop;
            let scrollLeft = window.scrollX || el.scrollLeft;
            return {
                top: box.top + scrollTop - clientTop,
                left: box.left + scrollLeft - clientLeft,
                scrollTop,
                scrollLeft
            };
        },
        load(type, fn) {
            if (!$heybike._events[type]) {
                $heybike._events[type] = [fn];
                const loadScript = (src, callback) => {
                    const script = document.createElement("script");
                    script.src = src;
                    script.onload = callback;
                    script.onerror = () => console.warn("Failed to load script:", src);
                    document.head.appendChild(script);
                };

                loadScript('{{ 'vue.min.js' | asset_url }}');
                $heybike.bind("VUE.MIN", vue => {
                    $heybike._events["VUE.MIN.DATA"] = vue;
                    $heybike._events[type].forEach(call => {
                        call && call(vue);
                    });
                });
            } else {
                if ($heybike._events["VUE.MIN.DATA"]) {
                    fn && fn($heybike._events["VUE.MIN.DATA"]);
                } else {
                    $heybike._events[type].push(fn);
                }
            }
        },
        clearCart: async function (e) {
            return new Promise((t, n) => {
                fetch(window.Shopify.routes.root + 'cart/clear.js', {
                    ...theme.utils.fetchConfig('javascript')
                }).then(e => e.json()).then(e => {
                    e.status ? (alert(e.description), n(new Error(e.description))) : t();
                }).catch(e => {
                    console.error(e), n(e);
                }).finally(() => {
                    e && e();
                });
            });
        },
        addToCart: async function ({items: e, button: r}, a, c) {
            let sectionsToBundle = [];
            document.documentElement.dispatchEvent(
                new CustomEvent('cart:bundled-sections', {
                    bubbles: true,
                    detail: {sections: sectionsToBundle}
                })
            );

            const config = {
                ...theme.utils.fetchConfig('javascript'),
                body: JSON.stringify({
                    items: e,
                    sections: sectionsToBundle,
                    sections_url: window.location.pathname
                })
            };

            if (r) {
                if (r.hasAttribute('aria-disabled')) return;
                r.setAttribute('aria-disabled', 'true');
                r.setAttribute('aria-busy', 'true');
            }
            a && await $heybike.clearCart();

            let isError = false;
            fetch(window.Shopify.routes.root + 'cart/add.js', config)
                .then(response => response.json())
                .then(async (parsedState) => {
                    if (parsedState.status) {
                        isError = true;
                        alert(parsedState.description);
                        return false;
                    }

                    if (a) {
                        return false;
                    }
                    const cartJson = await (
                        await fetch(`${theme.routes.cart_url}`, {
                            ...theme.utils.fetchConfig()
                        })
                    ).json();
                    cartJson['sections'] = parsedState['sections'];

                    theme.pubsub.publish(theme.pubsub.PUB_SUB_EVENTS.cartUpdate, {
                        cart: cartJson
                    });

                    document.dispatchEvent(
                        new CustomEvent('ajaxProduct:added', {
                            detail: {
                                product: parsedState
                            }
                        })
                    );
                    document.querySelector('cart-drawer')?.show();

                }).catch(e => {
                console.log(e);
            }).finally(() => {
                if (r) {
                    r.removeAttribute('aria-busy');
                    r.removeAttribute('aria-disabled');
                }
                c && c();
                if (a && !isError) {
                    window.location = '/checkout/'
                }
            });
        }
    };
    $heybike.on("load", () => {
        $heybike._loaded = true;
    });
    $heybike.on("DOMContentLoaded", () => {
        $heybike._domLoaded = true;
    });
</script>